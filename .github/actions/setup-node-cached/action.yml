name: Setup node with cached node_modules
description: Setup node and install npm packages after caching node_modules (ignoring version)

inputs:
  node-version:
    description: Version Spec of the version to use in SemVer notation.
    required: true
  path:
    description: Path where package-lock.json exists.
    required: false
    default: .
  lookup-only:
    description: If true, only checks if cache entry exists and skips download. Does not change save cache behavior.
    required: false

runs:
  using: composite
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
    - name: Generate .package-lock-for-cache.json
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        jq '.version = "0.0.0" | .packages[""].version = "0.0.0"' package-lock.json > .package-lock-for-cache.json

    - name: Cache node_modules
      id: node-modules-cache
      uses: actions/cache@v4
      with:
        path: ${{ inputs.path }}/node_modules
        key: "${{ runner.os }}-node-modules-${{ hashFiles('.package-lock-for-cache.json') }}"
        lookup-only: ${{ inputs.lookup-only }}

    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        npm ci

    - name: Run postinstall
      if: inputs.lookup-only != 'true' && steps.node-modules-cache.outputs.cache-hit == 'true'
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        npm run postinstall --if-present

    - name: Cleanup
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        rm -f .package-lock-for-cache.json